
Traffic_light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  000005b4  00000648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800090  00800090  00000678  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de3  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000781  00000000  00000000  0000155f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b6  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00002598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000426  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b8  00000000  00000000  00002b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000031c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <main>
  8a:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_write_char>:
* Purpose      : Write a specific Ascii char (data) to lcd (valid only with 4-bit mode)
* Parameters   : data  (data to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_char(uint8_t data){
	LCD_RS(1);
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	94 60       	ori	r25, 0x04	; 4
  96:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(READBIT(data, 4));
  98:	84 ff       	sbrs	r24, 4
  9a:	04 c0       	rjmp	.+8      	; 0xa4 <LCD_write_char+0x12>
  9c:	9b b3       	in	r25, 0x1b	; 27
  9e:	90 61       	ori	r25, 0x10	; 16
  a0:	9b bb       	out	0x1b, r25	; 27
  a2:	03 c0       	rjmp	.+6      	; 0xaa <LCD_write_char+0x18>
  a4:	9b b3       	in	r25, 0x1b	; 27
  a6:	9f 7e       	andi	r25, 0xEF	; 239
  a8:	9b bb       	out	0x1b, r25	; 27
	LCD_D5(READBIT(data, 5));
  aa:	85 ff       	sbrs	r24, 5
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <LCD_write_char+0x24>
  ae:	9b b3       	in	r25, 0x1b	; 27
  b0:	90 62       	ori	r25, 0x20	; 32
  b2:	9b bb       	out	0x1b, r25	; 27
  b4:	03 c0       	rjmp	.+6      	; 0xbc <LCD_write_char+0x2a>
  b6:	9b b3       	in	r25, 0x1b	; 27
  b8:	9f 7d       	andi	r25, 0xDF	; 223
  ba:	9b bb       	out	0x1b, r25	; 27
	LCD_D6(READBIT(data, 6));
  bc:	86 ff       	sbrs	r24, 6
  be:	04 c0       	rjmp	.+8      	; 0xc8 <LCD_write_char+0x36>
  c0:	9b b3       	in	r25, 0x1b	; 27
  c2:	90 64       	ori	r25, 0x40	; 64
  c4:	9b bb       	out	0x1b, r25	; 27
  c6:	03 c0       	rjmp	.+6      	; 0xce <LCD_write_char+0x3c>
  c8:	9b b3       	in	r25, 0x1b	; 27
  ca:	9f 7b       	andi	r25, 0xBF	; 191
  cc:	9b bb       	out	0x1b, r25	; 27
	LCD_D7(READBIT(data, 7));
  ce:	88 23       	and	r24, r24
  d0:	24 f4       	brge	.+8      	; 0xda <LCD_write_char+0x48>
  d2:	9b b3       	in	r25, 0x1b	; 27
  d4:	90 68       	ori	r25, 0x80	; 128
  d6:	9b bb       	out	0x1b, r25	; 27
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <LCD_write_char+0x4e>
  da:	9b b3       	in	r25, 0x1b	; 27
  dc:	9f 77       	andi	r25, 0x7F	; 127
  de:	9b bb       	out	0x1b, r25	; 27
	
	LCD_EN(1);
  e0:	9b b3       	in	r25, 0x1b	; 27
  e2:	98 60       	ori	r25, 0x08	; 8
  e4:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	ef e9       	ldi	r30, 0x9F	; 159
  e8:	ff e0       	ldi	r31, 0x0F	; 15
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_write_char+0x58>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_write_char+0x5e>
  f0:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
  f2:	9b b3       	in	r25, 0x1b	; 27
  f4:	97 7f       	andi	r25, 0xF7	; 247
  f6:	9b bb       	out	0x1b, r25	; 27
  f8:	ef e9       	ldi	r30, 0x9F	; 159
  fa:	ff e0       	ldi	r31, 0x0F	; 15
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_write_char+0x6a>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCD_write_char+0x70>
 102:	00 00       	nop
	_delay_ms(1);
	
	LCD_D4(READBIT(data, 0));
 104:	80 ff       	sbrs	r24, 0
 106:	04 c0       	rjmp	.+8      	; 0x110 <LCD_write_char+0x7e>
 108:	9b b3       	in	r25, 0x1b	; 27
 10a:	90 61       	ori	r25, 0x10	; 16
 10c:	9b bb       	out	0x1b, r25	; 27
 10e:	03 c0       	rjmp	.+6      	; 0x116 <LCD_write_char+0x84>
 110:	9b b3       	in	r25, 0x1b	; 27
 112:	9f 7e       	andi	r25, 0xEF	; 239
 114:	9b bb       	out	0x1b, r25	; 27
	LCD_D5(READBIT(data, 1));
 116:	81 ff       	sbrs	r24, 1
 118:	04 c0       	rjmp	.+8      	; 0x122 <LCD_write_char+0x90>
 11a:	9b b3       	in	r25, 0x1b	; 27
 11c:	90 62       	ori	r25, 0x20	; 32
 11e:	9b bb       	out	0x1b, r25	; 27
 120:	03 c0       	rjmp	.+6      	; 0x128 <LCD_write_char+0x96>
 122:	9b b3       	in	r25, 0x1b	; 27
 124:	9f 7d       	andi	r25, 0xDF	; 223
 126:	9b bb       	out	0x1b, r25	; 27
	LCD_D6(READBIT(data, 2));
 128:	82 ff       	sbrs	r24, 2
 12a:	04 c0       	rjmp	.+8      	; 0x134 <LCD_write_char+0xa2>
 12c:	9b b3       	in	r25, 0x1b	; 27
 12e:	90 64       	ori	r25, 0x40	; 64
 130:	9b bb       	out	0x1b, r25	; 27
 132:	03 c0       	rjmp	.+6      	; 0x13a <LCD_write_char+0xa8>
 134:	9b b3       	in	r25, 0x1b	; 27
 136:	9f 7b       	andi	r25, 0xBF	; 191
 138:	9b bb       	out	0x1b, r25	; 27
	LCD_D7(READBIT(data, 3));
 13a:	83 ff       	sbrs	r24, 3
 13c:	04 c0       	rjmp	.+8      	; 0x146 <LCD_write_char+0xb4>
 13e:	8b b3       	in	r24, 0x1b	; 27
 140:	80 68       	ori	r24, 0x80	; 128
 142:	8b bb       	out	0x1b, r24	; 27
 144:	03 c0       	rjmp	.+6      	; 0x14c <LCD_write_char+0xba>
 146:	8b b3       	in	r24, 0x1b	; 27
 148:	8f 77       	andi	r24, 0x7F	; 127
 14a:	8b bb       	out	0x1b, r24	; 27
	
	LCD_EN(1);
 14c:	8b b3       	in	r24, 0x1b	; 27
 14e:	88 60       	ori	r24, 0x08	; 8
 150:	8b bb       	out	0x1b, r24	; 27
 152:	8f e9       	ldi	r24, 0x9F	; 159
 154:	9f e0       	ldi	r25, 0x0F	; 15
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_write_char+0xc4>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_write_char+0xca>
 15c:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	87 7f       	andi	r24, 0xF7	; 247
 162:	8b bb       	out	0x1b, r24	; 27
 164:	ef e9       	ldi	r30, 0x9F	; 159
 166:	ff e0       	ldi	r31, 0x0F	; 15
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_write_char+0xd6>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_write_char+0xdc>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <LCD_write_command>:
* Purpose      : Send a specific command (cmd) to lcd (valid only with 4-bit mode)
* Parameters   : cmd  (command to be done by lcd)
* Return value : void
*****************************************************************************/
void LCD_write_command(uint8_t cmd){
	LCD_RS(0);
 172:	9b b3       	in	r25, 0x1b	; 27
 174:	9b 7f       	andi	r25, 0xFB	; 251
 176:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(READBIT(cmd, 4));
 178:	84 ff       	sbrs	r24, 4
 17a:	04 c0       	rjmp	.+8      	; 0x184 <LCD_write_command+0x12>
 17c:	9b b3       	in	r25, 0x1b	; 27
 17e:	90 61       	ori	r25, 0x10	; 16
 180:	9b bb       	out	0x1b, r25	; 27
 182:	03 c0       	rjmp	.+6      	; 0x18a <LCD_write_command+0x18>
 184:	9b b3       	in	r25, 0x1b	; 27
 186:	9f 7e       	andi	r25, 0xEF	; 239
 188:	9b bb       	out	0x1b, r25	; 27
	LCD_D5(READBIT(cmd, 5));
 18a:	85 ff       	sbrs	r24, 5
 18c:	04 c0       	rjmp	.+8      	; 0x196 <LCD_write_command+0x24>
 18e:	9b b3       	in	r25, 0x1b	; 27
 190:	90 62       	ori	r25, 0x20	; 32
 192:	9b bb       	out	0x1b, r25	; 27
 194:	03 c0       	rjmp	.+6      	; 0x19c <LCD_write_command+0x2a>
 196:	9b b3       	in	r25, 0x1b	; 27
 198:	9f 7d       	andi	r25, 0xDF	; 223
 19a:	9b bb       	out	0x1b, r25	; 27
	LCD_D6(READBIT(cmd, 6));
 19c:	86 ff       	sbrs	r24, 6
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <LCD_write_command+0x36>
 1a0:	9b b3       	in	r25, 0x1b	; 27
 1a2:	90 64       	ori	r25, 0x40	; 64
 1a4:	9b bb       	out	0x1b, r25	; 27
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <LCD_write_command+0x3c>
 1a8:	9b b3       	in	r25, 0x1b	; 27
 1aa:	9f 7b       	andi	r25, 0xBF	; 191
 1ac:	9b bb       	out	0x1b, r25	; 27
	LCD_D7(READBIT(cmd, 7));
 1ae:	88 23       	and	r24, r24
 1b0:	24 f4       	brge	.+8      	; 0x1ba <LCD_write_command+0x48>
 1b2:	9b b3       	in	r25, 0x1b	; 27
 1b4:	90 68       	ori	r25, 0x80	; 128
 1b6:	9b bb       	out	0x1b, r25	; 27
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <LCD_write_command+0x4e>
 1ba:	9b b3       	in	r25, 0x1b	; 27
 1bc:	9f 77       	andi	r25, 0x7F	; 127
 1be:	9b bb       	out	0x1b, r25	; 27
	
	LCD_EN(1);
 1c0:	9b b3       	in	r25, 0x1b	; 27
 1c2:	98 60       	ori	r25, 0x08	; 8
 1c4:	9b bb       	out	0x1b, r25	; 27
 1c6:	ef e9       	ldi	r30, 0x9F	; 159
 1c8:	ff e0       	ldi	r31, 0x0F	; 15
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_write_command+0x58>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_write_command+0x5e>
 1d0:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 1d2:	9b b3       	in	r25, 0x1b	; 27
 1d4:	97 7f       	andi	r25, 0xF7	; 247
 1d6:	9b bb       	out	0x1b, r25	; 27
 1d8:	ef e9       	ldi	r30, 0x9F	; 159
 1da:	ff e0       	ldi	r31, 0x0F	; 15
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_write_command+0x6a>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_write_command+0x70>
 1e2:	00 00       	nop
	_delay_ms(1);
	
	LCD_D4(READBIT(cmd, 0));
 1e4:	80 ff       	sbrs	r24, 0
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <LCD_write_command+0x7e>
 1e8:	9b b3       	in	r25, 0x1b	; 27
 1ea:	90 61       	ori	r25, 0x10	; 16
 1ec:	9b bb       	out	0x1b, r25	; 27
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <LCD_write_command+0x84>
 1f0:	9b b3       	in	r25, 0x1b	; 27
 1f2:	9f 7e       	andi	r25, 0xEF	; 239
 1f4:	9b bb       	out	0x1b, r25	; 27
	LCD_D5(READBIT(cmd, 1));
 1f6:	81 ff       	sbrs	r24, 1
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <LCD_write_command+0x90>
 1fa:	9b b3       	in	r25, 0x1b	; 27
 1fc:	90 62       	ori	r25, 0x20	; 32
 1fe:	9b bb       	out	0x1b, r25	; 27
 200:	03 c0       	rjmp	.+6      	; 0x208 <LCD_write_command+0x96>
 202:	9b b3       	in	r25, 0x1b	; 27
 204:	9f 7d       	andi	r25, 0xDF	; 223
 206:	9b bb       	out	0x1b, r25	; 27
	LCD_D6(READBIT(cmd, 2));
 208:	82 ff       	sbrs	r24, 2
 20a:	04 c0       	rjmp	.+8      	; 0x214 <LCD_write_command+0xa2>
 20c:	9b b3       	in	r25, 0x1b	; 27
 20e:	90 64       	ori	r25, 0x40	; 64
 210:	9b bb       	out	0x1b, r25	; 27
 212:	03 c0       	rjmp	.+6      	; 0x21a <LCD_write_command+0xa8>
 214:	9b b3       	in	r25, 0x1b	; 27
 216:	9f 7b       	andi	r25, 0xBF	; 191
 218:	9b bb       	out	0x1b, r25	; 27
	LCD_D7(READBIT(cmd, 3));
 21a:	83 ff       	sbrs	r24, 3
 21c:	04 c0       	rjmp	.+8      	; 0x226 <LCD_write_command+0xb4>
 21e:	8b b3       	in	r24, 0x1b	; 27
 220:	80 68       	ori	r24, 0x80	; 128
 222:	8b bb       	out	0x1b, r24	; 27
 224:	03 c0       	rjmp	.+6      	; 0x22c <LCD_write_command+0xba>
 226:	8b b3       	in	r24, 0x1b	; 27
 228:	8f 77       	andi	r24, 0x7F	; 127
 22a:	8b bb       	out	0x1b, r24	; 27
	
	LCD_EN(1);
 22c:	8b b3       	in	r24, 0x1b	; 27
 22e:	88 60       	ori	r24, 0x08	; 8
 230:	8b bb       	out	0x1b, r24	; 27
 232:	8f e9       	ldi	r24, 0x9F	; 159
 234:	9f e0       	ldi	r25, 0x0F	; 15
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_write_command+0xc4>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_write_command+0xca>
 23c:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 23e:	8b b3       	in	r24, 0x1b	; 27
 240:	87 7f       	andi	r24, 0xF7	; 247
 242:	8b bb       	out	0x1b, r24	; 27
 244:	ef e9       	ldi	r30, 0x9F	; 159
 246:	ff e0       	ldi	r31, 0x0F	; 15
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCD_write_command+0xd6>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <LCD_write_command+0xdc>
 24e:	00 00       	nop
 250:	08 95       	ret

00000252 <LCD_init>:
* Purpose      : initialize LCD to work in 4-bit mode - clear lcd - cursor off
* Parameters   : void
* Return value : void
*****************************************************************************/
void LCD_init(void){
	INIT_LCD_PINS();
 252:	8a b3       	in	r24, 0x1a	; 26
 254:	8c 6f       	ori	r24, 0xFC	; 252
 256:	8a bb       	out	0x1a, r24	; 26
	LCD_write_command(0x3);
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
 25e:	8f e7       	ldi	r24, 0x7F	; 127
 260:	9e e3       	ldi	r25, 0x3E	; 62
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_init+0x10>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_init+0x16>
 268:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
 270:	8f e7       	ldi	r24, 0x7F	; 127
 272:	9e e3       	ldi	r25, 0x3E	; 62
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <LCD_init+0x22>
 278:	00 c0       	rjmp	.+0      	; 0x27a <LCD_init+0x28>
 27a:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
 282:	8f e7       	ldi	r24, 0x7F	; 127
 284:	9e e3       	ldi	r25, 0x3E	; 62
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <LCD_init+0x34>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_init+0x3a>
 28c:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x2);
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_command(0x28);
 294:	88 e2       	ldi	r24, 0x28	; 40
 296:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_command(0x01);
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_command(0x06);
 2a0:	86 e0       	ldi	r24, 0x06	; 6
 2a2:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_command(0x0C);
 2a6:	8c e0       	ldi	r24, 0x0C	; 12
 2a8:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
 2ac:	9f ef       	ldi	r25, 0xFF	; 255
 2ae:	29 ef       	ldi	r18, 0xF9	; 249
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	91 50       	subi	r25, 0x01	; 1
 2b4:	20 40       	sbci	r18, 0x00	; 0
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <LCD_init+0x60>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LCD_init+0x6a>
 2bc:	00 00       	nop
 2be:	08 95       	ret

000002c0 <LCD_write_number>:
* Function Name: LCD_write_num
* Purpose      : Write a specific number (num) on lcd (valid only with 4-bit mode)
* Parameters   : num  (num to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_number(int32_t num){
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
 2cc:	2a 97       	sbiw	r28, 0x0a	; 10
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
	int8_t i = 0;
	uint8_t num_arr[10];
	uint8_t neg_flag = 0;
	
	if(num < 0){
 2d8:	99 23       	and	r25, r25
 2da:	4c f4       	brge	.+18     	; 0x2ee <LCD_write_number+0x2e>
		num *= -1;
 2dc:	90 95       	com	r25
 2de:	80 95       	com	r24
 2e0:	70 95       	com	r23
 2e2:	61 95       	neg	r22
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255
 2e6:	8f 4f       	sbci	r24, 0xFF	; 255
 2e8:	9f 4f       	sbci	r25, 0xFF	; 255
		neg_flag = 1;
 2ea:	01 e0       	ldi	r16, 0x01	; 1
 2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <LCD_write_number+0x30>
* Return value : void
*****************************************************************************/
void LCD_write_number(int32_t num){
	int8_t i = 0;
	uint8_t num_arr[10];
	uint8_t neg_flag = 0;
 2ee:	00 e0       	ldi	r16, 0x00	; 0
	if(num < 0){
		num *= -1;
		neg_flag = 1;
	}
	
	if(num == 0) {
 2f0:	61 15       	cp	r22, r1
 2f2:	71 05       	cpc	r23, r1
 2f4:	81 05       	cpc	r24, r1
 2f6:	91 05       	cpc	r25, r1
 2f8:	d1 f4       	brne	.+52     	; 0x32e <LCD_write_number+0x6e>
		LCD_write_char('0');
 2fa:	80 e3       	ldi	r24, 0x30	; 48
 2fc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_char>
 300:	31 c0       	rjmp	.+98     	; 0x364 <LCD_write_number+0xa4>
		return;
	}
	
	for(i = 0; num != 0 ;i++){ // 6,5,2,1
		num_arr[i] = num % 10 + '0';
 302:	2a e0       	ldi	r18, 0x0A	; 10
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	0e 94 97 02 	call	0x52e	; 0x52e <__divmodsi4>
 30e:	e1 e0       	ldi	r30, 0x01	; 1
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	ec 0f       	add	r30, r28
 314:	fd 1f       	adc	r31, r29
 316:	e1 0f       	add	r30, r17
 318:	f1 1d       	adc	r31, r1
 31a:	17 fd       	sbrc	r17, 7
 31c:	fa 95       	dec	r31
 31e:	60 5d       	subi	r22, 0xD0	; 208
 320:	60 83       	st	Z, r22
		num /= 10;
 322:	62 2f       	mov	r22, r18
 324:	73 2f       	mov	r23, r19
 326:	84 2f       	mov	r24, r20
 328:	95 2f       	mov	r25, r21
	if(num == 0) {
		LCD_write_char('0');
		return;
	}
	
	for(i = 0; num != 0 ;i++){ // 6,5,2,1
 32a:	1f 5f       	subi	r17, 0xFF	; 255
 32c:	01 c0       	rjmp	.+2      	; 0x330 <LCD_write_number+0x70>
 32e:	10 e0       	ldi	r17, 0x00	; 0
 330:	61 15       	cp	r22, r1
 332:	71 05       	cpc	r23, r1
 334:	81 05       	cpc	r24, r1
 336:	91 05       	cpc	r25, r1
 338:	21 f7       	brne	.-56     	; 0x302 <LCD_write_number+0x42>
		num_arr[i] = num % 10 + '0';
		num /= 10;
	}
	i--;
 33a:	11 50       	subi	r17, 0x01	; 1
	if(neg_flag == 1){
 33c:	01 30       	cpi	r16, 0x01	; 1
 33e:	81 f4       	brne	.+32     	; 0x360 <LCD_write_number+0xa0>
		LCD_write_char('-');
 340:	8d e2       	ldi	r24, 0x2D	; 45
 342:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_char>
 346:	0c c0       	rjmp	.+24     	; 0x360 <LCD_write_number+0xa0>
	}
	while (i >= 0){
		LCD_write_char(num_arr[i]);
 348:	e1 e0       	ldi	r30, 0x01	; 1
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	ec 0f       	add	r30, r28
 34e:	fd 1f       	adc	r31, r29
 350:	e1 0f       	add	r30, r17
 352:	f1 1d       	adc	r31, r1
 354:	17 fd       	sbrc	r17, 7
 356:	fa 95       	dec	r31
 358:	80 81       	ld	r24, Z
 35a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_char>
		i--;
 35e:	11 50       	subi	r17, 0x01	; 1
	}
	i--;
	if(neg_flag == 1){
		LCD_write_char('-');
	}
	while (i >= 0){
 360:	11 23       	and	r17, r17
 362:	94 f7       	brge	.-28     	; 0x348 <LCD_write_number+0x88>
		LCD_write_char(num_arr[i]);
		i--;
	}
}
 364:	2a 96       	adiw	r28, 0x0a	; 10
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	de bf       	out	0x3e, r29	; 62
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	cd bf       	out	0x3d, r28	; 61
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	08 95       	ret

0000037a <LCD_write_string>:
* Purpose      : Write a string (*txt) to lcd (valid only with 4-bit mode)
*                (assume the end char of string is NULL (Ascii:'\0' - decimal:0 ))
* Parameters   : *txt  (array of char to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8_t * str){
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	cf 93       	push	r28
 380:	8c 01       	movw	r16, r24
	uint8_t i;
	
	for(i = 0; str[i] != 0; i++){
 382:	c0 e0       	ldi	r28, 0x00	; 0
 384:	03 c0       	rjmp	.+6      	; 0x38c <LCD_write_string+0x12>
		LCD_write_char(str[i]);
 386:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_char>
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8_t * str){
	uint8_t i;
	
	for(i = 0; str[i] != 0; i++){
 38a:	cf 5f       	subi	r28, 0xFF	; 255
 38c:	f8 01       	movw	r30, r16
 38e:	ec 0f       	add	r30, r28
 390:	f1 1d       	adc	r31, r1
 392:	80 81       	ld	r24, Z
 394:	81 11       	cpse	r24, r1
 396:	f7 cf       	rjmp	.-18     	; 0x386 <LCD_write_string+0xc>
		LCD_write_char(str[i]);
	}
	
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	08 95       	ret

000003a0 <main>:
uint8_t lcd_counter = 255;
uint8_t state = GREEN;

int main(void)
{
    LCD_init();
 3a0:	0e 94 29 01 	call	0x252	; 0x252 <LCD_init>
	//Timer0_CTC_init(160); // Freq = 16Mhz, CC = 1/16 usec, Counter overflow = 160 count / 16 usec = 10 usec
	Timer0_normal_init(); // Freq = 16MHz, CC = 1/16 usec, Timer overflow = 256 count/ 16 usec = 16 usec
 3a4:	0e 94 8e 02 	call	0x51c	; 0x51c <Timer0_normal_init>
	
	
	// Set pins Mode to outputs
	SETBIT(DDRD, RED);      // PB0 output (RED LIGHT)
 3a8:	81 b3       	in	r24, 0x11	; 17
 3aa:	81 60       	ori	r24, 0x01	; 1
 3ac:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD, YELLOW);   // PB1 output (YELLOW LIGHT)
 3ae:	81 b3       	in	r24, 0x11	; 17
 3b0:	82 60       	ori	r24, 0x02	; 2
 3b2:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD, GREEN);     // PB2 output (GREEN LIGHT)
 3b4:	81 b3       	in	r24, 0x11	; 17
 3b6:	84 60       	ori	r24, 0x04	; 4
 3b8:	81 bb       	out	0x11, r24	; 17
	
	SETBIT(PORTD, RED); 
 3ba:	82 b3       	in	r24, 0x12	; 18
 3bc:	81 60       	ori	r24, 0x01	; 1
 3be:	82 bb       	out	0x12, r24	; 18
	LCD_write_string("Timer: ");
 3c0:	82 e6       	ldi	r24, 0x62	; 98
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_write_string>
	LCD_write_command(0xc0);
 3c8:	80 ec       	ldi	r24, 0xC0	; 192
 3ca:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_string("STATE: ");
 3ce:	8a e6       	ldi	r24, 0x6A	; 106
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_write_string>
    while (1) 
    {
		while(lcd_counter != 255);
 3d6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lcd_counter>
 3da:	8f 3f       	cpi	r24, 0xFF	; 255
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x36>
		if(state == RED){
 3de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3e2:	81 11       	cpse	r24, r1
 3e4:	1e c0       	rjmp	.+60     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			state = YELLOW;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			lcd_counter = 3;
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lcd_counter>
			CLRBIT(PORTD, RED);
 3f2:	82 b3       	in	r24, 0x12	; 18
 3f4:	8e 7f       	andi	r24, 0xFE	; 254
 3f6:	82 bb       	out	0x12, r24	; 18
			SETBIT(PORTD, YELLOW);
 3f8:	82 b3       	in	r24, 0x12	; 18
 3fa:	82 60       	ori	r24, 0x02	; 2
 3fc:	82 bb       	out	0x12, r24	; 18
			CLRBIT(PORTD, GREEN);
 3fe:	82 b3       	in	r24, 0x12	; 18
 400:	8b 7f       	andi	r24, 0xFB	; 251
 402:	82 bb       	out	0x12, r24	; 18
			LCD_write_command(0xc7);
 404:	87 ec       	ldi	r24, 0xC7	; 199
 406:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
			LCD_write_string("           ");
 40a:	82 e7       	ldi	r24, 0x72	; 114
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_write_string>
			LCD_write_command(0xc7);
 412:	87 ec       	ldi	r24, 0xC7	; 199
 414:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
			LCD_write_string("YELLOW");
 418:	8e e7       	ldi	r24, 0x7E	; 126
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_write_string>
 420:	da cf       	rjmp	.-76     	; 0x3d6 <main+0x36>
		}
		else if(state == YELLOW){
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	f1 f4       	brne	.+60     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
			state = GREEN;
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			CLRBIT(PORTD, RED);
 42c:	82 b3       	in	r24, 0x12	; 18
 42e:	8e 7f       	andi	r24, 0xFE	; 254
 430:	82 bb       	out	0x12, r24	; 18
			CLRBIT(PORTD, YELLOW);
 432:	82 b3       	in	r24, 0x12	; 18
 434:	8d 7f       	andi	r24, 0xFD	; 253
 436:	82 bb       	out	0x12, r24	; 18
			SETBIT(PORTD, GREEN);
 438:	82 b3       	in	r24, 0x12	; 18
 43a:	84 60       	ori	r24, 0x04	; 4
 43c:	82 bb       	out	0x12, r24	; 18
			lcd_counter = 4;
 43e:	84 e0       	ldi	r24, 0x04	; 4
 440:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lcd_counter>
			LCD_write_command(0xc7);
 444:	87 ec       	ldi	r24, 0xC7	; 199
 446:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
			LCD_write_string("           ");
 44a:	82 e7       	ldi	r24, 0x72	; 114
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_write_string>
			LCD_write_command(0xc7);
 452:	87 ec       	ldi	r24, 0xC7	; 199
 454:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
			LCD_write_string("GREEN");
 458:	85 e8       	ldi	r24, 0x85	; 133
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_write_string>
 460:	ba cf       	rjmp	.-140    	; 0x3d6 <main+0x36>
		}
		else{
			state = RED;
 462:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			SETBIT(PORTD, RED);
 466:	82 b3       	in	r24, 0x12	; 18
 468:	81 60       	ori	r24, 0x01	; 1
 46a:	82 bb       	out	0x12, r24	; 18
			CLRBIT(PORTD, YELLOW);
 46c:	82 b3       	in	r24, 0x12	; 18
 46e:	8d 7f       	andi	r24, 0xFD	; 253
 470:	82 bb       	out	0x12, r24	; 18
			CLRBIT(PORTD, GREEN);
 472:	82 b3       	in	r24, 0x12	; 18
 474:	8b 7f       	andi	r24, 0xFB	; 251
 476:	82 bb       	out	0x12, r24	; 18
			lcd_counter = 5;
 478:	85 e0       	ldi	r24, 0x05	; 5
 47a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lcd_counter>
			LCD_write_command(0xc7);
 47e:	87 ec       	ldi	r24, 0xC7	; 199
 480:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
			LCD_write_string("           ");
 484:	82 e7       	ldi	r24, 0x72	; 114
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_write_string>
			LCD_write_command(0xc7);
 48c:	87 ec       	ldi	r24, 0xC7	; 199
 48e:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
			LCD_write_string("RED");
 492:	8b e8       	ldi	r24, 0x8B	; 139
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_write_string>
 49a:	9d cf       	rjmp	.-198    	; 0x3d6 <main+0x36>

0000049c <__vector_11>:
		}
		
    }
}

ISR(TIMER0_OVF_vect){
 49c:	1f 92       	push	r1
 49e:	0f 92       	push	r0
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	0f 92       	push	r0
 4a4:	11 24       	eor	r1, r1
 4a6:	2f 93       	push	r18
 4a8:	3f 93       	push	r19
 4aa:	4f 93       	push	r20
 4ac:	5f 93       	push	r21
 4ae:	6f 93       	push	r22
 4b0:	7f 93       	push	r23
 4b2:	8f 93       	push	r24
 4b4:	9f 93       	push	r25
 4b6:	af 93       	push	r26
 4b8:	bf 93       	push	r27
 4ba:	ef 93       	push	r30
 4bc:	ff 93       	push	r31
	static uint16_t count = 0;
	count++;
 4be:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
 4c2:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__data_end+0x1>
 4cc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__data_end>
	if(count == 62500){
 4d0:	84 32       	cpi	r24, 0x24	; 36
 4d2:	94 4f       	sbci	r25, 0xF4	; 244
 4d4:	91 f4       	brne	.+36     	; 0x4fa <__vector_11+0x5e>
		LCD_write_command(0x87);
 4d6:	87 e8       	ldi	r24, 0x87	; 135
 4d8:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
		LCD_write_number(lcd_counter--);
 4dc:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <lcd_counter>
 4e0:	8f ef       	ldi	r24, 0xFF	; 255
 4e2:	86 0f       	add	r24, r22
 4e4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lcd_counter>
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_write_number>
		count = 0;
 4f2:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__data_end+0x1>
 4f6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__data_end>
	}
 4fa:	ff 91       	pop	r31
 4fc:	ef 91       	pop	r30
 4fe:	bf 91       	pop	r27
 500:	af 91       	pop	r26
 502:	9f 91       	pop	r25
 504:	8f 91       	pop	r24
 506:	7f 91       	pop	r23
 508:	6f 91       	pop	r22
 50a:	5f 91       	pop	r21
 50c:	4f 91       	pop	r20
 50e:	3f 91       	pop	r19
 510:	2f 91       	pop	r18
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <Timer0_normal_init>:
 */ 

#include "Timer0.h"

void Timer0_normal_init(void){
	TCCR0 = (1<<FOC0) | (1<<CS00); // no prescaler, normal mode
 51c:	81 e8       	ldi	r24, 0x81	; 129
 51e:	83 bf       	out	0x33, r24	; 51
	SETBIT(TIMSK, TOIE0); // enable interrupt for normal mode
 520:	89 b7       	in	r24, 0x39	; 57
 522:	81 60       	ori	r24, 0x01	; 1
 524:	89 bf       	out	0x39, r24	; 57
	SETBIT(SREG, 7); // Enable global interrupt
 526:	8f b7       	in	r24, 0x3f	; 63
 528:	80 68       	ori	r24, 0x80	; 128
 52a:	8f bf       	out	0x3f, r24	; 63
 52c:	08 95       	ret

0000052e <__divmodsi4>:
 52e:	05 2e       	mov	r0, r21
 530:	97 fb       	bst	r25, 7
 532:	1e f4       	brtc	.+6      	; 0x53a <__divmodsi4+0xc>
 534:	00 94       	com	r0
 536:	0e 94 ae 02 	call	0x55c	; 0x55c <__negsi2>
 53a:	57 fd       	sbrc	r21, 7
 53c:	07 d0       	rcall	.+14     	; 0x54c <__divmodsi4_neg2>
 53e:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodsi4>
 542:	07 fc       	sbrc	r0, 7
 544:	03 d0       	rcall	.+6      	; 0x54c <__divmodsi4_neg2>
 546:	4e f4       	brtc	.+18     	; 0x55a <__divmodsi4_exit>
 548:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__negsi2>

0000054c <__divmodsi4_neg2>:
 54c:	50 95       	com	r21
 54e:	40 95       	com	r20
 550:	30 95       	com	r19
 552:	21 95       	neg	r18
 554:	3f 4f       	sbci	r19, 0xFF	; 255
 556:	4f 4f       	sbci	r20, 0xFF	; 255
 558:	5f 4f       	sbci	r21, 0xFF	; 255

0000055a <__divmodsi4_exit>:
 55a:	08 95       	ret

0000055c <__negsi2>:
 55c:	90 95       	com	r25
 55e:	80 95       	com	r24
 560:	70 95       	com	r23
 562:	61 95       	neg	r22
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	8f 4f       	sbci	r24, 0xFF	; 255
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	08 95       	ret

0000056c <__udivmodsi4>:
 56c:	a1 e2       	ldi	r26, 0x21	; 33
 56e:	1a 2e       	mov	r1, r26
 570:	aa 1b       	sub	r26, r26
 572:	bb 1b       	sub	r27, r27
 574:	fd 01       	movw	r30, r26
 576:	0d c0       	rjmp	.+26     	; 0x592 <__udivmodsi4_ep>

00000578 <__udivmodsi4_loop>:
 578:	aa 1f       	adc	r26, r26
 57a:	bb 1f       	adc	r27, r27
 57c:	ee 1f       	adc	r30, r30
 57e:	ff 1f       	adc	r31, r31
 580:	a2 17       	cp	r26, r18
 582:	b3 07       	cpc	r27, r19
 584:	e4 07       	cpc	r30, r20
 586:	f5 07       	cpc	r31, r21
 588:	20 f0       	brcs	.+8      	; 0x592 <__udivmodsi4_ep>
 58a:	a2 1b       	sub	r26, r18
 58c:	b3 0b       	sbc	r27, r19
 58e:	e4 0b       	sbc	r30, r20
 590:	f5 0b       	sbc	r31, r21

00000592 <__udivmodsi4_ep>:
 592:	66 1f       	adc	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	88 1f       	adc	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	1a 94       	dec	r1
 59c:	69 f7       	brne	.-38     	; 0x578 <__udivmodsi4_loop>
 59e:	60 95       	com	r22
 5a0:	70 95       	com	r23
 5a2:	80 95       	com	r24
 5a4:	90 95       	com	r25
 5a6:	9b 01       	movw	r18, r22
 5a8:	ac 01       	movw	r20, r24
 5aa:	bd 01       	movw	r22, r26
 5ac:	cf 01       	movw	r24, r30
 5ae:	08 95       	ret

000005b0 <_exit>:
 5b0:	f8 94       	cli

000005b2 <__stop_program>:
 5b2:	ff cf       	rjmp	.-2      	; 0x5b2 <__stop_program>
